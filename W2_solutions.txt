###W2_ex1_start_py
# Set n and initialise P
n = 20
P = 1

# Loop from j=2 to j=n
for j in range(2, n+1):
    # Multiply each term in succession
    P *= j**3 + 5*j**2 - 3

# Display the result
print(P)
###W2_ex1_end

###W2_ex2_start_py
zen = 'If the implementation is hard to explain, it is a bad idea. If the implementation is easy to explain, it may be a good idea.'
count = 0

# The .split() method returns a list of words
for word in zen.split():
    if 'e' in word:
        print(word)
    elif 'i' in word:
        print(word[0])
    else:
        count += 1
###W2_ex2_end

###W2_ex3_start_md
The outer loop runs for 10 iterations, and at each of these, the inner loop runs for 5 iterations. If the conditional `break` was absent, then we should see that `count` has reached $5\times 10 = 50$ after the loops: it is incremented 5 times each of the 10 iterations of the outer loop. The `print()` statement is inside the outer loop, but outside the inner loop: it executes only once per iteration of the outer loop, so we should see a total of 10 numbers displayed below the cell.

When `count` reaches 18, the **inner** loop breaks (but not the outer loop!). `count` is then printed, with the inner loop only having completed 3 iterations this time. We then start a new iteration of the outer loop, and enter the inner loop again (with `j` set to `0`), where `count` is incremented by 1 (so now `count` is `19`). Since `count > 17` is still `True`, we break the inner loop again (after just 1 iteration), `print(count)`, and start the new iteration of the outer loop. This continues until we've completed the 10 iterations of the outer loop.

`break` only breaks the **innermost** loop.
###W2_ex3_switch_py
count = 0

for i in range(10):
    for j in range(5):
        count += 1
        if count > 17:
            break   # this break...
    # ... leads us exactly here (just outside of the inner loop)
    print(count)
###W2_ex3_end

###W2_ex4_start_py
def collatz(m):
    '''
    Returns the number of elements of the Collatz
    sequence starting with m.
    '''
    # We don't know how many iterations are needed yet,
    # so we have to use a while loop.
    
    # Initialise a_0 and iteration count
    a = m
    k = 0
    
    # Keep calculating elements until we reach 1
    while a > 1:
        if a % 2 == 0:   # a is even
            a = a // 2
        else:   # a is odd
            a = 3*a + 1
        
        # Increment k
        k += 1
    
    # Return the number of iterations
    return k

print(collatz(15))
print(collatz(27))
print(collatz(618))
###W2_ex4_end

###W2_ex5_start_py
# Create an x-axis with 1000 points
x = np.linspace(-np.pi, np.pi, 1000)

# Evaluate the functions at all these points
f1 = np.sin(x)
f2 = np.tan(0.49 * x)
f3 = np.sin(x) * np.cos(2*x)

# Create the plots in the same axes
plt.plot(x, f1, 'r-.')
plt.plot(x, f2, 'g:')
plt.plot(x, f3, 'b--')

# Display the plot
plt.show()
###W2_ex5_end

###W2_ex6_start_py
import matplotlib.pyplot as plt
import numpy as np

# Create an x-axis with 1000 points
x = np.linspace(-np.pi, np.pi, 1000)

# Evaluate the functions at all these points
f1 = np.sin(x)
f2 = np.tan(0.49 * x)
f3 = np.sin(x) * np.cos(2*x)

# Create a figure with 3 subplots
fig, ax = plt.subplots(1, 3, figsize=(10, 4))

# Plot each function in a different subplot
ax[0].plot(x, f1, 'r-.')
ax[1].plot(x, f2, 'g:')
ax[2].plot(x, f3, 'b--')

# Display the plot
plt.show()
###W2_ex6_end

###W2_ex7_start_py
# Store y-axis label for each plot
y_labels = [r'$f_1(x)$', r'$f_2(x)$', r'$f_3(x)$']

# Set all 3 properties for the 3 plots
for i in range(3):
    ax[i].set_xlim([-np.pi, np.pi])
    ax[i].set_xlabel(r'$x$', fontsize=14)
    ax[i].set_ylabel(y_labels[i], fontsize=14)

# Make some space
plt.subplots_adjust(hspace=0.5, wspace=0.5)

# Update display
plt.show()
###W2_ex7_end

###W2_ex8_start_py
import matplotlib.pyplot as plt
import numpy as np
import math

# Define a function for the truncated Maclaurin series
def trunc_cos(x, n):
    '''
    Return the truncated Maclaurin series for
    cos(x), with terms up until order n.
    '''
    cos_series = 0
    for k in range(n//2 + 1):
        # Add each term of the series up to nth order
        cos_series += (-1)**k * x**(2*k) / math.factorial(2*k)
    
    return cos_series


# Create an x-axis with 1000 points
x = np.linspace(-np.pi, np.pi, 1000)

# Create a figure
fig, ax = plt.subplots()

# Plot the requested functions
ax.plot(x, np.cos(x), 'k-', label=r'$\cos(x)$')
ax.plot(x, trunc_cos(x, 2), 'r--', label=r'Order 2')
ax.plot(x, trunc_cos(x, 4), 'g-.', label=r'Order 4')
ax.plot(x, trunc_cos(x, 6), 'b:', label=r'Order 6')

# Set axis properties
ax.set_xlim([-np.pi, np.pi])
ax.set_ylim([-1.5, 1.5])
ax.set_xlabel(r'$x$', fontsize=12)
ax.legend()

plt.show()
###W2_ex8_end

###W2_ex9_start_py
import numpy as np

def my_sqrt(x):
    """Returns sqrt(x) if x is positive,
    raises a ValueError if x is negative.
    """
    # Check that x is either a float or an int
    if not isinstance(x, (float, int)):
        raise TypeError(f'Can only take sqrt of numbers, but {x} is a {type(x)}.')
    
    # If it is, proceed as before
    elif x < 0:
        raise ValueError('Cannot take sqrt of a negative number!')
    else:
        return np.sqrt(x)

print(my_sqrt(4))
print(my_sqrt(3.3))
print(my_sqrt([5, 2]))
###W2_ex9_end

###W2_ex11_start_py
import numpy as np

# Create the matrix M
M = np.array([[9, 3, 0], [-2, -2, 1], [0, -1, 1]])

# Create the vector y
y = np.array([0.4, -3, 0.3])
###W2_ex11_end

###W2_ex12_start_py
# Assuming we still have M and y in memory from Exercise 11...
x = np.linalg.solve(M, y)

# Print the norms
for p in [1, 2, 3, 4, 5, np.inf]:
    print(f'The {p}-norm of x is {np.linalg.norm(x, p)}.')
###W2_ex12_end

###W2_ex13_start_py
import numpy as np

# Create a random number generator
rng = np.random.default_rng()

# Create a random matrix A with 2000x2000 elements between -1 and 1.05
n = 2000
A = (1.05 + 1) * rng.random([n, n]) - 1.

# Get the sum of all rows of A
row_sums = np.sum(A, axis=1)

# Display the proportion of rows with a positive sum
positive_sum_rows = np.sum(row_sums >= 0)
print(f'The probability that a row of A is positive',
      f'is approximately {100 * positive_sum_rows / n : .1f}%.')
###W2_ex13_end

###W2_ex14_start_md
You can use 2 nested loops to loop over each pair of column and compute correlation coefficients between each pair.

To fit a linear function between 2 columns, you ahve a few options:
- use `np.linalg.solve()` to solve the overdetermined system [1, germany] x = bulgaria (x is the 2x1 vector [a, b], [1, germany] is an nx2 matrix with 1s in the first column)
- use `scipy.stats.linregress`
- use curve-fitting functions in `scipy.optimize`, for instance `least_squares()`

For these statistics, again, `numpy` and `scipy` have got you covered: `np.median`, `scipy.stats.mode`, `scipy.stats.gmean`.
###W2_ex14_end

###W2_ex15_start_py
For example, you could write the functions so that they accept the standard deviations as an input argument, and run several simulations (with loops) with different tolerance values. You could display partial results by e.g. fixing the standard deviations for the parts A, B, C, and showing the maximum tolerance for D such that you reliably hit some threshold (e.g. 95%) of viable parts.
###W2_ex15_end
